<?xml version="1.0" encoding="UTF-8"?>
<!--日志级别从低到高优先级为：ALL < TRACE < DEBUG < INFO < WARN < ERROR < FATAL < OFF。-->
<!--status：设置 log4j2 自身内部的信息输出，可以不设置-->
<!--monitorInterval：监视配置文件变化间隔时间，单位秒，Log4j2 能够自动检测配置文件是否修改，同时更新配置-->
<configuration status="WARN" monitorInterval="30">


    <!--变量配置-->
    <Properties>
        <!-- 格式化输出：%date表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度 %msg：日志消息，%n是换行符-->
        <!-- %logger{36} 表示 Logger 名字最长36个字符 -->
        <property name="LOG_PATTERN" value="%d{yyyy-MM-dd HH:mm:ss.SSS} %-5p %-5L --- [%15.15t] %-40.40c{1.} (%line) : %m%n%wEx" />
        <!-- 定义日志存储的路径 -->
        <property name="FILE_PATH" value="logs" />
        <property name="FILE_NAME" value="文件名" />
    </Properties>

    <!--先定义所有的 appender 附加器-->
    <appenders>
        <!--控制台输出配置-->
        <console name="CONSOLE-LOG" target="SYSTEM_OUT">
            <!--控制台只输出level及其以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
            <!--输出日志的格式
                %d表示日期时间，
                %thread表示线程名，
                %-5level：级别从左显示5个字符宽度
                %logger{50} 表示logger名字最长50个字符，否则按照句点分割。
                %line：表示行号
                %msg：日志消息
                %n是换行符-->
<!--            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} -&#45;&#45; [%thread] %-5level => %logger{-20}: %line - %msg%n"/>-->
<!--            <PatternLayout pattern="${sys:CONSOLE_LOG_PATTERN}"/>-->
            <PatternLayout pattern="${LOG_PATTERN}"/>
        </console>

        <!--文件存储文件设置-->
        <!--fileName：文件存储路径及名称，可以是绝对路径或者相对路径; 存储的永远是最新的日志信息-->
        <!--filePattern：当 fileName 指定的文件大小超过限制，就会根据此文件名规则新建存档目录与文件，同时将 fileName 文件中的
         内容剪切到存档文件中，如下配置，会新建存档路径 logs/2021-06/2021-06-01-1.log -->
        <RollingFile name="FILE-LOG" fileName="${FILE_PATH}/app.log"
                     filePattern="logs/%d{yyyy-MM-dd}.log">

            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY"/>
            <!--日志文件中日志信息的格式-->
            <PatternLayout pattern="${LOG_PATTERN}"/>
            <Policies>
                <!-- 这里是基于时间触发的滚动日志策略，根据上面filePattern的定义，日志文件会一天分割出来一个 -->
                <TimeBasedTriggeringPolicy/>
                <!--日志文件大小超过多少时进行存档-->
                <SizeBasedTriggeringPolicy size="50 MB"/>
                <!--保存日志文件个数,默认7-->
                <DefaultRolloverStrategy max="10"/>
            </Policies>
        </RollingFile>
    </appenders>

    <!--
    1、root与logger是父子关系，没有特别定义logger的都默认为root。
    2、任何一个类只会和一个logger对应，要么是定义的logger，要么是root，判断的关键在于找到这个logger，然后判断这个logger的appender和level。
    3、appender-ref 用于引用上面定义好的 appender 日志追加器，只有引用了，上面的 appender 才能生效. -->
    <loggers>
        <!--过滤掉 spring 和 mybatis 的一些无用的 DEBUG 信息;也可以单独指定自己的某个包-->
        <logger name="org.springframework" level="INFO"></logger>
        <logger name="com.wmx" level="INFO"></logger>
        <logger name="org.example.log4j2" level="INFO"></logger>

        <root level="debug">
            <appender-ref ref="CONSOLE-LOG"/>
            <appender-ref ref="FILE-LOG"/>
        </root>
    </loggers>
</configuration>
